// tslint:disable
/**
 * Commerce Service API
 * API for Digital Commerce Platform
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    GetClisResponse,
    GetMsisdnsResponse,
} from '../models';

export interface GetCliRequest {
    areaCode: string;
    _class?: GetCliClassEnum;
    numOfClis?: number;
    pattern?: string;
}

export interface GetMsisdnsRequest {
    brand?: GetMsisdnsBrandEnum;
    category?: GetMsisdnsCategoryEnum;
    _class?: GetMsisdnsClassEnum;
    hlrId?: GetMsisdnsHlrIdEnum;
    numOfMsisdns?: number;
    pattern?: string;
    purpose?: GetMsisdnsPurposeEnum;
}

/**
 * no description
 */
export class ResourceApi extends BaseAPI {

    /**
     * Get CLI
     * Get cli
     */
    getCli({ areaCode, _class, numOfClis, pattern }: GetCliRequest): Observable<GetClisResponse>
    getCli({ areaCode, _class, numOfClis, pattern }: GetCliRequest, opts?: OperationOpts): Observable<RawAjaxResponse<GetClisResponse>>
    getCli({ areaCode, _class, numOfClis, pattern }: GetCliRequest, opts?: OperationOpts): Observable<GetClisResponse | RawAjaxResponse<GetClisResponse>> {
        throwIfNullOrUndefined(areaCode, 'areaCode', 'getCli');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'areaCode': areaCode,
        };

        if (_class != null) { query['class'] = _class; }
        if (numOfClis != null) { query['numOfClis'] = numOfClis; }
        if (pattern != null) { query['pattern'] = pattern; }

        return this.request<GetClisResponse>({
            url: '/api/resource/clis',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get Msisdns
     * GetMsisdns
     */
    getMsisdns({ brand, category, _class, hlrId, numOfMsisdns, pattern, purpose }: GetMsisdnsRequest): Observable<GetMsisdnsResponse>
    getMsisdns({ brand, category, _class, hlrId, numOfMsisdns, pattern, purpose }: GetMsisdnsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<GetMsisdnsResponse>>
    getMsisdns({ brand, category, _class, hlrId, numOfMsisdns, pattern, purpose }: GetMsisdnsRequest, opts?: OperationOpts): Observable<GetMsisdnsResponse | RawAjaxResponse<GetMsisdnsResponse>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        const query: HttpQuery = {};

        if (brand != null) { query['brand'] = brand; }
        if (category != null) { query['category'] = category; }
        if (_class != null) { query['class'] = _class; }
        if (hlrId != null) { query['hlrId'] = hlrId; }
        if (numOfMsisdns != null) { query['numOfMsisdns'] = numOfMsisdns; }
        if (pattern != null) { query['pattern'] = pattern; }
        if (purpose != null) { query['purpose'] = purpose; }

        return this.request<GetMsisdnsResponse>({
            url: '/api/resource/msisdns',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum GetCliClassEnum {
    STANDARD = 'STANDARD',
    GOLDEN = 'GOLDEN'
}
/**
 * @export
 * @enum {string}
 */
export enum GetMsisdnsBrandEnum {
    SUNRISE = 'SUNRISE'
}
/**
 * @export
 * @enum {string}
 */
export enum GetMsisdnsCategoryEnum {
    POSTPAID = 'POSTPAID',
    PREPAID = 'PREPAID'
}
/**
 * @export
 * @enum {string}
 */
export enum GetMsisdnsClassEnum {
    STANDARD = 'STANDARD',
    GOLDEN = 'GOLDEN'
}
/**
 * @export
 * @enum {string}
 */
export enum GetMsisdnsHlrIdEnum {
    HLR10 = 'HLR10'
}
/**
 * @export
 * @enum {string}
 */
export enum GetMsisdnsPurposeEnum {
    MASTER = 'MASTER',
    SLAVE = 'SLAVE'
}

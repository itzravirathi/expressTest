// tslint:disable
/**
 * Commerce Service API
 * API for Digital Commerce Platform
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    AccessoryPlanResponse,
    CliPortabilityCheckResponse,
    Device,
    DevicePlanResponse,
    GetDiscountsInfoResponse,
    GetPackMigrationMatrixResponse,
    GetPriceOfferingsRequest,
    GetPriceOfferingsResponse,
    GetProductMigrationMatrixResponse,
    MsisdnPortabilityCheckResponse,
    Service,
} from '../models';

export interface GetAccessoryPlanRequest {
    serial: string;
}

export interface GetDeviceRequest {
    serial: string;
    lang: GetDeviceLangEnum;
}

export interface GetDevicePlansRequest {
    serial: string;
}

export interface GetPriceOfferingsRequest {
    getPriceOfferingsRequest: GetPriceOfferingsRequest;
}

export interface PortabilityCheckCliRequest {
    serial: string;
}

export interface PortabilityCheckMsisdnRequest {
    serial: string;
}

export interface SubscriptionMigrationsRequest {
    serial: string;
}

export interface SubscriptionServiceDetailsRequest {
    serial: string;
    accessInfo?: boolean;
}

/**
 * no description
 */
export class SubscriptionApi extends BaseAPI {

    /**
     * GetAccessoryPlan
     * GetDevicePlans
     */
    getAccessoryPlan({ serial }: GetAccessoryPlanRequest): Observable<AccessoryPlanResponse>
    getAccessoryPlan({ serial }: GetAccessoryPlanRequest, opts?: OperationOpts): Observable<RawAjaxResponse<AccessoryPlanResponse>>
    getAccessoryPlan({ serial }: GetAccessoryPlanRequest, opts?: OperationOpts): Observable<AccessoryPlanResponse | RawAjaxResponse<AccessoryPlanResponse>> {
        throwIfNullOrUndefined(serial, 'serial', 'getAccessoryPlan');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<AccessoryPlanResponse>({
            url: '/api/subscription/{serial}/accessoryPlan'.replace('{serial}', encodeURI(serial)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * GetDevice
     * GetDevice
     */
    getDevice({ serial, lang }: GetDeviceRequest): Observable<Device>
    getDevice({ serial, lang }: GetDeviceRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Device>>
    getDevice({ serial, lang }: GetDeviceRequest, opts?: OperationOpts): Observable<Device | RawAjaxResponse<Device>> {
        throwIfNullOrUndefined(serial, 'serial', 'getDevice');
        throwIfNullOrUndefined(lang, 'lang', 'getDevice');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'lang': lang,
        };

        return this.request<Device>({
            url: '/api/subscription/{serial}/device'.replace('{serial}', encodeURI(serial)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetDevicePlans
     * GetDevicePlans
     */
    getDevicePlans({ serial }: GetDevicePlansRequest): Observable<DevicePlanResponse>
    getDevicePlans({ serial }: GetDevicePlansRequest, opts?: OperationOpts): Observable<RawAjaxResponse<DevicePlanResponse>>
    getDevicePlans({ serial }: GetDevicePlansRequest, opts?: OperationOpts): Observable<DevicePlanResponse | RawAjaxResponse<DevicePlanResponse>> {
        throwIfNullOrUndefined(serial, 'serial', 'getDevicePlans');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<DevicePlanResponse>({
            url: '/api/subscription/{serial}/devicePlans'.replace('{serial}', encodeURI(serial)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * GetDiscountsInfo
     * GetDiscountsInfo
     */
    getDiscountsInfo(): Observable<GetDiscountsInfoResponse>
    getDiscountsInfo(opts?: OperationOpts): Observable<RawAjaxResponse<GetDiscountsInfoResponse>>
    getDiscountsInfo(opts?: OperationOpts): Observable<GetDiscountsInfoResponse | RawAjaxResponse<GetDiscountsInfoResponse>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<GetDiscountsInfoResponse>({
            url: '/api/subscription/discountsInfo',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns available Mobile pack for migration
     */
    getPackMigrationMatrix(): Observable<GetPackMigrationMatrixResponse>
    getPackMigrationMatrix(opts?: OperationOpts): Observable<RawAjaxResponse<GetPackMigrationMatrixResponse>>
    getPackMigrationMatrix(opts?: OperationOpts): Observable<GetPackMigrationMatrixResponse | RawAjaxResponse<GetPackMigrationMatrixResponse>> {
        return this.request<GetPackMigrationMatrixResponse>({
            url: '/api/subscription/packs/migrations',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Returns available offers for product
     */
    getPriceOfferings({ getPriceOfferingsRequest }: GetPriceOfferingsRequest): Observable<GetPriceOfferingsResponse>
    getPriceOfferings({ getPriceOfferingsRequest }: GetPriceOfferingsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<GetPriceOfferingsResponse>>
    getPriceOfferings({ getPriceOfferingsRequest }: GetPriceOfferingsRequest, opts?: OperationOpts): Observable<GetPriceOfferingsResponse | RawAjaxResponse<GetPriceOfferingsResponse>> {
        throwIfNullOrUndefined(getPriceOfferingsRequest, 'getPriceOfferingsRequest', 'getPriceOfferings');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<GetPriceOfferingsResponse>({
            url: '/api/subscription/priceOffers',
            method: 'POST',
            headers,
            body: getPriceOfferingsRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get cli Portability check
     * Get cli Portability check
     */
    portabilityCheckCli({ serial }: PortabilityCheckCliRequest): Observable<CliPortabilityCheckResponse>
    portabilityCheckCli({ serial }: PortabilityCheckCliRequest, opts?: OperationOpts): Observable<RawAjaxResponse<CliPortabilityCheckResponse>>
    portabilityCheckCli({ serial }: PortabilityCheckCliRequest, opts?: OperationOpts): Observable<CliPortabilityCheckResponse | RawAjaxResponse<CliPortabilityCheckResponse>> {
        throwIfNullOrUndefined(serial, 'serial', 'portabilityCheckCli');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<CliPortabilityCheckResponse>({
            url: '/api/subscription/{serial}/portabilityCheck/cli'.replace('{serial}', encodeURI(serial)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get msisdn Portability check
     * Get msisdn Portability check
     */
    portabilityCheckMsisdn({ serial }: PortabilityCheckMsisdnRequest): Observable<MsisdnPortabilityCheckResponse>
    portabilityCheckMsisdn({ serial }: PortabilityCheckMsisdnRequest, opts?: OperationOpts): Observable<RawAjaxResponse<MsisdnPortabilityCheckResponse>>
    portabilityCheckMsisdn({ serial }: PortabilityCheckMsisdnRequest, opts?: OperationOpts): Observable<MsisdnPortabilityCheckResponse | RawAjaxResponse<MsisdnPortabilityCheckResponse>> {
        throwIfNullOrUndefined(serial, 'serial', 'portabilityCheckMsisdn');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<MsisdnPortabilityCheckResponse>({
            url: '/api/subscription/{serial}/portabilityCheck/msisdn'.replace('{serial}', encodeURI(serial)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * GetMigrations
     * GetMigrations
     */
    subscriptionMigrations({ serial }: SubscriptionMigrationsRequest): Observable<GetProductMigrationMatrixResponse>
    subscriptionMigrations({ serial }: SubscriptionMigrationsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<GetProductMigrationMatrixResponse>>
    subscriptionMigrations({ serial }: SubscriptionMigrationsRequest, opts?: OperationOpts): Observable<GetProductMigrationMatrixResponse | RawAjaxResponse<GetProductMigrationMatrixResponse>> {
        throwIfNullOrUndefined(serial, 'serial', 'subscriptionMigrations');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<GetProductMigrationMatrixResponse>({
            url: '/api/subscription/{serial}/migrations'.replace('{serial}', encodeURI(serial)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * GetService
     * Get single service details
     */
    subscriptionServiceDetails({ serial, accessInfo }: SubscriptionServiceDetailsRequest): Observable<Service>
    subscriptionServiceDetails({ serial, accessInfo }: SubscriptionServiceDetailsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Service>>
    subscriptionServiceDetails({ serial, accessInfo }: SubscriptionServiceDetailsRequest, opts?: OperationOpts): Observable<Service | RawAjaxResponse<Service>> {
        throwIfNullOrUndefined(serial, 'serial', 'subscriptionServiceDetails');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        const query: HttpQuery = {};

        if (accessInfo != null) { query['accessInfo'] = accessInfo; }

        return this.request<Service>({
            url: '/api/subscription/{serial}'.replace('{serial}', encodeURI(serial)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum GetDeviceLangEnum {
    EN = 'en',
    DE = 'de',
    FR = 'fr',
    IT = 'it'
}

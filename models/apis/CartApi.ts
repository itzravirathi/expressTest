// tslint:disable
/**
 * Commerce Service API
 * API for Digital Commerce Platform
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    AddGlobalDiscountRequest,
    AddProductWithVoucherPromoRequest,
    AddToCartRequest,
    Cart,
    UpdateCartRequest,
    ValidateOfferResponse,
} from '../models';

export interface AaddGlobalDiscountRequest {
    cartId: string;
    body: AddGlobalDiscountRequest;
}

export interface AddProductWithVoucherPromoRequest {
    cartId: string;
    body: AddProductWithVoucherPromoRequest;
}

export interface AddToCartRequest {
    cartId: string;
    body: AddToCartRequest;
}

export interface ClearCartCartRequest {
    cartId: string;
}

export interface GetCartRequest {
    cartId: string;
    lang?: GetCartLangEnum;
}

export interface RemoveBundleFromCartRequest {
    cartId: string;
    bundleNo: number;
    lang?: RemoveBundleFromCartLangEnum;
}

export interface RemoveEntryFromCartByIdRequest {
    cartId: string;
    entryNumber: number;
}

export interface RemoveGlobalDiscountRequest {
    cartId: string;
    globalDiscountType: RemoveGlobalDiscountGlobalDiscountTypeEnum;
    lang?: RemoveGlobalDiscountLangEnum;
}

export interface SwitchPackRequest {
    cartId: string;
    mobilePack: SwitchPackMobilePackEnum;
    lang?: SwitchPackLangEnum;
}

export interface UpdateCartRequest {
    cartId: string;
    body: UpdateCartRequest;
}

export interface ValidateOfferidRequest {
    offerid: string;
}

/**
 * no description
 */
export class CartApi extends BaseAPI {

    /**
     * Add GlobalDiscount to cart
     * AddGlobalDiscount
     */
    aaddGlobalDiscount({ cartId, body }: AaddGlobalDiscountRequest): Observable<Cart>
    aaddGlobalDiscount({ cartId, body }: AaddGlobalDiscountRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Cart>>
    aaddGlobalDiscount({ cartId, body }: AaddGlobalDiscountRequest, opts?: OperationOpts): Observable<Cart | RawAjaxResponse<Cart>> {
        throwIfNullOrUndefined(cartId, 'cartId', 'aaddGlobalDiscount');
        throwIfNullOrUndefined(body, 'body', 'aaddGlobalDiscount');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<Cart>({
            url: '/api/cart/{cartId}/globalDiscount'.replace('{cartId}', encodeURI(cartId)),
            method: 'POST',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

    /**
     * Add product With VoucherPromo to cart
     * Add ProductWithVoucherPromo
     */
    addProductWithVoucherPromo({ cartId, body }: AddProductWithVoucherPromoRequest): Observable<Cart>
    addProductWithVoucherPromo({ cartId, body }: AddProductWithVoucherPromoRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Cart>>
    addProductWithVoucherPromo({ cartId, body }: AddProductWithVoucherPromoRequest, opts?: OperationOpts): Observable<Cart | RawAjaxResponse<Cart>> {
        throwIfNullOrUndefined(cartId, 'cartId', 'addProductWithVoucherPromo');
        throwIfNullOrUndefined(body, 'body', 'addProductWithVoucherPromo');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<Cart>({
            url: '/api/cart/{cartId}/productWithVoucherPromo'.replace('{cartId}', encodeURI(cartId)),
            method: 'POST',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

    /**
     * Add single or multiple entry(s) to cart
     * AddToCart
     */
    addToCart({ cartId, body }: AddToCartRequest): Observable<Cart>
    addToCart({ cartId, body }: AddToCartRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Cart>>
    addToCart({ cartId, body }: AddToCartRequest, opts?: OperationOpts): Observable<Cart | RawAjaxResponse<Cart>> {
        throwIfNullOrUndefined(cartId, 'cartId', 'addToCart');
        throwIfNullOrUndefined(body, 'body', 'addToCart');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<Cart>({
            url: '/api/cart/{cartId}'.replace('{cartId}', encodeURI(cartId)),
            method: 'POST',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

    /**
     * Clear Cart
     * ClearCart
     */
    clearCartCart({ cartId }: ClearCartCartRequest): Observable<Cart>
    clearCartCart({ cartId }: ClearCartCartRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Cart>>
    clearCartCart({ cartId }: ClearCartCartRequest, opts?: OperationOpts): Observable<Cart | RawAjaxResponse<Cart>> {
        throwIfNullOrUndefined(cartId, 'cartId', 'clearCartCart');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<Cart>({
            url: '/api/cart/{cartId}'.replace('{cartId}', encodeURI(cartId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create empty Cart
     * CreateCart
     */
    createCart(): Observable<Cart>
    createCart(opts?: OperationOpts): Observable<RawAjaxResponse<Cart>>
    createCart(opts?: OperationOpts): Observable<Cart | RawAjaxResponse<Cart>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<Cart>({
            url: '/api/cart',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get Cart Details
     * GetCart
     */
    getCart({ cartId, lang }: GetCartRequest): Observable<Cart>
    getCart({ cartId, lang }: GetCartRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Cart>>
    getCart({ cartId, lang }: GetCartRequest, opts?: OperationOpts): Observable<Cart | RawAjaxResponse<Cart>> {
        throwIfNullOrUndefined(cartId, 'cartId', 'getCart');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        const query: HttpQuery = {};

        if (lang != null) { query['lang'] = lang; }

        return this.request<Cart>({
            url: '/api/cart/{cartId}'.replace('{cartId}', encodeURI(cartId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Remove bundle from Cart
     * RemoveBundleFromCart
     */
    removeBundleFromCart({ cartId, bundleNo, lang }: RemoveBundleFromCartRequest): Observable<Cart>
    removeBundleFromCart({ cartId, bundleNo, lang }: RemoveBundleFromCartRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Cart>>
    removeBundleFromCart({ cartId, bundleNo, lang }: RemoveBundleFromCartRequest, opts?: OperationOpts): Observable<Cart | RawAjaxResponse<Cart>> {
        throwIfNullOrUndefined(cartId, 'cartId', 'removeBundleFromCart');
        throwIfNullOrUndefined(bundleNo, 'bundleNo', 'removeBundleFromCart');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        const query: HttpQuery = {};

        if (lang != null) { query['lang'] = lang; }

        return this.request<Cart>({
            url: '/api/cart/{cartId}/removeBundle/{bundleNo}'.replace('{cartId}', encodeURI(cartId)).replace('{bundleNo}', encodeURI(bundleNo)),
            method: 'DELETE',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Remove entry from Cart by Id
     * RemoveEntryFromCartById
     */
    removeEntryFromCartById({ cartId, entryNumber }: RemoveEntryFromCartByIdRequest): Observable<object>
    removeEntryFromCartById({ cartId, entryNumber }: RemoveEntryFromCartByIdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<object>>
    removeEntryFromCartById({ cartId, entryNumber }: RemoveEntryFromCartByIdRequest, opts?: OperationOpts): Observable<object | RawAjaxResponse<object>> {
        throwIfNullOrUndefined(cartId, 'cartId', 'removeEntryFromCartById');
        throwIfNullOrUndefined(entryNumber, 'entryNumber', 'removeEntryFromCartById');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<object>({
            url: '/api/cart/{cartId}/{entryNumber}'.replace('{cartId}', encodeURI(cartId)).replace('{entryNumber}', encodeURI(entryNumber)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * RemoveGlobalDiscount from cart
     * RemoveGlobalDiscount
     */
    removeGlobalDiscount({ cartId, globalDiscountType, lang }: RemoveGlobalDiscountRequest): Observable<Cart>
    removeGlobalDiscount({ cartId, globalDiscountType, lang }: RemoveGlobalDiscountRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Cart>>
    removeGlobalDiscount({ cartId, globalDiscountType, lang }: RemoveGlobalDiscountRequest, opts?: OperationOpts): Observable<Cart | RawAjaxResponse<Cart>> {
        throwIfNullOrUndefined(cartId, 'cartId', 'removeGlobalDiscount');
        throwIfNullOrUndefined(globalDiscountType, 'globalDiscountType', 'removeGlobalDiscount');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        const query: HttpQuery = {};

        if (lang != null) { query['lang'] = lang; }

        return this.request<Cart>({
            url: '/api/cart/{cartId}/globalDiscount/{globalDiscountType}'.replace('{cartId}', encodeURI(cartId)).replace('{globalDiscountType}', encodeURI(globalDiscountType)),
            method: 'DELETE',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Switch Pack level
     * SwitchPack
     */
    switchPack({ cartId, mobilePack, lang }: SwitchPackRequest): Observable<Cart>
    switchPack({ cartId, mobilePack, lang }: SwitchPackRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Cart>>
    switchPack({ cartId, mobilePack, lang }: SwitchPackRequest, opts?: OperationOpts): Observable<Cart | RawAjaxResponse<Cart>> {
        throwIfNullOrUndefined(cartId, 'cartId', 'switchPack');
        throwIfNullOrUndefined(mobilePack, 'mobilePack', 'switchPack');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        const query: HttpQuery = {};

        if (lang != null) { query['lang'] = lang; }

        return this.request<Cart>({
            url: '/api/cart/{cartId}/switchPack/{mobilePack}'.replace('{cartId}', encodeURI(cartId)).replace('{mobilePack}', encodeURI(mobilePack)),
            method: 'PUT',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update Cart
     * UpdateCart
     */
    updateCart({ cartId, body }: UpdateCartRequest): Observable<Cart>
    updateCart({ cartId, body }: UpdateCartRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Cart>>
    updateCart({ cartId, body }: UpdateCartRequest, opts?: OperationOpts): Observable<Cart | RawAjaxResponse<Cart>> {
        throwIfNullOrUndefined(cartId, 'cartId', 'updateCart');
        throwIfNullOrUndefined(body, 'body', 'updateCart');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<Cart>({
            url: '/api/cart/{cartId}'.replace('{cartId}', encodeURI(cartId)),
            method: 'PUT',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

    /**
     * Get Cart id base on offer id
     * GetCart
     */
    validateOfferid({ offerid }: ValidateOfferidRequest): Observable<ValidateOfferResponse>
    validateOfferid({ offerid }: ValidateOfferidRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ValidateOfferResponse>>
    validateOfferid({ offerid }: ValidateOfferidRequest, opts?: OperationOpts): Observable<ValidateOfferResponse | RawAjaxResponse<ValidateOfferResponse>> {
        throwIfNullOrUndefined(offerid, 'offerid', 'validateOfferid');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<ValidateOfferResponse>({
            url: '/api/cart/validate/offer/{offerid}'.replace('{offerid}', encodeURI(offerid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum GetCartLangEnum {
    EN = 'en',
    DE = 'de',
    FR = 'fr',
    IT = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum RemoveBundleFromCartLangEnum {
    EN = 'en',
    DE = 'de',
    FR = 'fr',
    IT = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum RemoveGlobalDiscountGlobalDiscountTypeEnum {
    AGENT_GLOBAL_DISCOUNT = 'AGENT_GLOBAL_DISCOUNT'
}
/**
 * @export
 * @enum {string}
 */
export enum RemoveGlobalDiscountLangEnum {
    EN = 'en',
    DE = 'de',
    FR = 'fr',
    IT = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum SwitchPackMobilePackEnum {
    M = 'WE_MOBILE_PACK_M',
    L = 'WE_MOBILE_PACK_L',
    XL = 'WE_MOBILE_PACK_XL'
}
/**
 * @export
 * @enum {string}
 */
export enum SwitchPackLangEnum {
    EN = 'en',
    DE = 'de',
    FR = 'fr',
    IT = 'it'
}

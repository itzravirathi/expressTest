// tslint:disable
/**
 * Commerce Service API
 * API for Digital Commerce Platform
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    Product,
    ProductSearchResponse,
    UpsellProductResponse,
} from '../models';

export interface GetProductVariantsRequest {
    id: string;
    lang?: GetProductVariantsLangEnum;
    fields?: string;
}

export interface GetProductsRequest {
    ids: string;
    lang?: GetProductsLangEnum;
}

export interface SearchProductsRequest {
    typeCode?: string;
    currentPage?: number;
    pageSize?: number;
    query?: Array<string>;
    lang?: SearchProductsLangEnum;
}

/**
 * no description
 */
export class ProductApi extends BaseAPI {

    /**
     * Get Product(s) Details
     * GetProductVariants
     */
    getProductVariants({ id, lang, fields }: GetProductVariantsRequest): Observable<Array<Product>>
    getProductVariants({ id, lang, fields }: GetProductVariantsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<Product>>>
    getProductVariants({ id, lang, fields }: GetProductVariantsRequest, opts?: OperationOpts): Observable<Array<Product> | RawAjaxResponse<Array<Product>>> {
        throwIfNullOrUndefined(id, 'id', 'getProductVariants');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        const query: HttpQuery = {};

        if (lang != null) { query['lang'] = lang; }
        if (fields != null) { query['fields'] = fields; }

        return this.request<Array<Product>>({
            url: '/api/products/variants/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get Product(s) Details
     * GetProducts
     */
    getProducts({ ids, lang }: GetProductsRequest): Observable<Array<Product>>
    getProducts({ ids, lang }: GetProductsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<Product>>>
    getProducts({ ids, lang }: GetProductsRequest, opts?: OperationOpts): Observable<Array<Product> | RawAjaxResponse<Array<Product>>> {
        throwIfNullOrUndefined(ids, 'ids', 'getProducts');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        const query: HttpQuery = {};

        if (lang != null) { query['lang'] = lang; }

        return this.request<Array<Product>>({
            url: '/api/products/{ids}'.replace('{ids}', encodeURI(ids)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get Upsell Products
     * GetUpsellProducts
     */
    getUpsellProducts(): Observable<UpsellProductResponse>
    getUpsellProducts(opts?: OperationOpts): Observable<RawAjaxResponse<UpsellProductResponse>>
    getUpsellProducts(opts?: OperationOpts): Observable<UpsellProductResponse | RawAjaxResponse<UpsellProductResponse>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<UpsellProductResponse>({
            url: '/api/products/upsell',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Search Products
     * SearchProducts
     */
    searchProducts({ typeCode, currentPage, pageSize, query: queryAlias, lang }: SearchProductsRequest): Observable<ProductSearchResponse>
    searchProducts({ typeCode, currentPage, pageSize, query: queryAlias, lang }: SearchProductsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ProductSearchResponse>>
    searchProducts({ typeCode, currentPage, pageSize, query: queryAlias, lang }: SearchProductsRequest, opts?: OperationOpts): Observable<ProductSearchResponse | RawAjaxResponse<ProductSearchResponse>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        const query: HttpQuery = {};

        if (typeCode != null) { query['typeCode'] = typeCode; }
        if (currentPage != null) { query['currentPage'] = currentPage; }
        if (pageSize != null) { query['pageSize'] = pageSize; }
        if (queryAlias != null) { query['query'] = queryAlias; }
        if (lang != null) { query['lang'] = lang; }

        return this.request<ProductSearchResponse>({
            url: '/api/products/search',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum GetProductVariantsLangEnum {
    EN = 'en',
    DE = 'de',
    FR = 'fr',
    IT = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum GetProductsLangEnum {
    EN = 'en',
    DE = 'de',
    FR = 'fr',
    IT = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum SearchProductsLangEnum {
    EN = 'en',
    DE = 'de',
    FR = 'fr',
    IT = 'it'
}
